name: Build Cross-Platform Binaries

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g. v0.1.0) used when manually dispatching'
        required: false
        type: string

permissions:
  contents: write   # needed to create releases/upload assets

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
          - os: macos-latest
            target: macos
          - os: windows-latest
            target: windows
    env:
      PYTHON_VERSION: '3.13'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug event context
        shell: bash
        run: |
          echo "event_name=${GITHUB_EVENT_NAME}"
          echo "github.ref=${GITHUB_REF}"
          echo "github.ref_name=${GITHUB_REF_NAME}"
          echo "github.sha=${GITHUB_SHA}"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then echo "is_tag=yes"; else echo "is_tag=no"; fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        shell: bash
        run: |
          uv sync
          uv tool install pyinstaller

      - name: Build binary
        shell: bash
        run: |
          APP_NAME=lu
          if [[ "${{ matrix.target }}" == "windows" ]]; then
            APP_NAME=lu.exe
          fi
          pyinstaller --onefile --name "$APP_NAME" main.py

      - name: Archive artifact
        if: success()
        shell: bash
        run: |
          mkdir dist/upload
          if [[ "${{ matrix.target }}" == "windows" ]]; then
            mv dist/lu.exe dist/upload/lu-${{ matrix.target }}.exe
          elif [[ "${{ matrix.target }}" == "macos" ]]; then
            mv dist/lu dist/upload/lu-${{ matrix.target }}
          else
            mv dist/lu dist/upload/lu-${{ matrix.target }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lu-${{ matrix.target }}
          path: dist/upload/*
          if-no-files-found: error

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: >-
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && inputs.version != '')
    steps:
      - name: Extract tag name
        id: tag
        run: echo "tag_name=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts structure:" >&2
          find artifacts -type f -maxdepth 3 -print || true
          echo "File sizes:" >&2
          ls -l artifacts/* || true

      - name: Generate checksums
        run: |
          cd artifacts
          for f in */*; do
            sha256sum "$f" > "$f.sha256"
          done

      - name: Verify assets exist
        run: |
          set -e
          test -f artifacts/lu-linux/lu-linux || { echo 'missing linux binary'; exit 1; }
          test -f artifacts/lu-macos/lu-macos || { echo 'missing macos binary'; exit 1; }
          test -f artifacts/lu-windows/lu-windows.exe || { echo 'missing windows binary'; exit 1; }
          echo "All expected assets present."

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          name: lookup-cli ${{ steps.tag.outputs.tag_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/*/*
            artifacts/*/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display release URL
        run: echo "Release published for ${{ steps.tag.outputs.tag_name }}"
